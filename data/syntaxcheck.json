{
 "erroradvice": 
 [ 
  {
   "id": "ASL_MSG_RETURN_TYPES",
   "advice": "Some of the execution paths do not return a value.  All control paths that return must return a value otherwise unepected behaviour may occur.  This error occurs because a branch on an conditional op-code returns a value and another does not, which is inconsitent behaviour."
  },
  {
   "id": "ASL_MSG_RESERVED_RETURN_VALUE",
   "advice": "A reserved method was expected to return a value, however, it does not. This is unexpected behaviour that does not conform the the ACPI specification."
  },
  {
   "id": "ASL_MSG_INVALID_TYPE",
   "advice": "An invalid type was used.  A different type was expected to be used.",
  },
  {
   "id": "ASL_MSG_RESERVED_NO_RETURN_VAL",
   "advice": "A reserved method returned a value however it is not expected to return anything, so this does not conform to the expected behaviour.  The kernel will most probably ignore the return value, so this is not going to produce any run time errors."
  },
  {
   "id": "ASL_MSG_ALIGNMENT",
   "advice": "Addresses must be an exact multiple of the alignment value."
  },
  {
   "id": "ASL_MSG_ALPHANUMERIC_STRING",
   "advice": "For _HID (Hardware object IDs), the ACPI specification requires all characters must be alphanumeric. Section 6.1.4 of version 4.0a of the specification states that a valid PNP ID must be of the form AAA#### (where A is an uppercase letter and # is a hex digit) and a valid ACPI ID must be of the form ACPI#### where # is a hex digit."
  },
  {
   "id": "ASL_MSG_AML_NOT_IMPLEMENTED",
   "advice": "This error message should not occur."
  },
  {
   "id": "ASL_MSG_ARG_COUNT_HI",
   "advice": "Method is called with too many arguments. This is a bug and can lead to unexpected and undefined behaviour."
  },
  {
   "id": "ASL_MSG_ARG_COUNT_LO",
   "advice": "Method is called with too few arguments. This is a bug and can lead to unexpected and undefined behaviour."
  },
  {
   "id": "ASL_MSG_ARG_INIT",
   "advice": "FIXME"
  },
  {
   "id": "ASL_MSG_BACKWARDS_OFFSET",
   "advice": "Backwards offsets in fields are illegal and this is a bug in the AML. The iasl compiler will ignore this node completely."
  },
  {
   "id": "ASL_MSG_BUFFER_LENGTH",
   "advice": "The AML buffer length was zero and contained no items. This is most probably a mistake - but the compiler has gone ahead and compiled this in as a zero sized buffer anyway."
  },
  {
   "id": "ASL_MSG_DMA_CHANNEL",
   "advice": "DMA channels are described by an 8 bit mask, hence there can only be 8 channels 0..7. See ACPI specification 4.0a, section 6.4.2.2 DMA Descriptor
 for more details."
  },
  {
   "id": "ASL_MSG_DMA_LIST",
   "advice": "Only a maximum of 8 DMA channels can be specified in a list."
  },
  {
   "id": "ASL_MSG_DUPLICATE_ITEM",
   "advice": "An initializer list has duplicate items, which is illegal."
  },
  {
   "id": "ASL_MSG_HID_LENGTH",
   "advice": " _HID String must be of the form XXX#### or ACPI####."
  },
  {
   "id": "ASL_MSG_INTEGER_LENGTH",
   "advice": "A 64 bit integer has been truncated down to a 32 bit value.  This could lead to unexpected behaviour due to loss of data through truncation."
  },
  {
   "id": "ASL_MSG_INTERRUPT_NUMBER",
   "advice": "Only interrupts 0..15 are allowed as the IRQ mask is just 16 bits wide."
  },
  {
   "id": "ASL_MSG_INVALID_ADDR_FLAGS",
   "advice": "This occurs if the length is zero and just one of the resource MIF/MAF flags are set, or the length is non-zero and resource MIF/MAF flags are both set. These are illegal combinations and need to be fixed. See section 6.4.3.5 Address Space Resource Descriptors of version 4.0a of the ACPI specification for more details."
  },
  {
   "id": "ASL_MSG_INVALID_EISAID",
   "advice": "The EISAID string must be exactly 7 characters and of the form UUUXXXX, 3 uppercase letters and 4 hex digits (e.g., 'PNP0001'). See section 18.5.35 'EISAID (EISA ID String To Integer Conversion Macro)' of version 4.0a of the ACPI specification for more details."
  },
  {
   "id": "ASL_MSG_INVALID_GRANULARITY",
   "advice": "This occurs if the specified granularity is non-zero and not a power-of-two minus one in value."
  },
  {
   "id": "ASL_MSG_INVALID_LENGTH",
   "advice": "This needs to be fixed as the length specified is greater than the window size specified by the Min/Max fields - this is clealy ambiguous."
  },
  {
   "id": "ASL_MSG_INVALID_LENGTH_FIXED",
   "advice": "The minimum address is greater than the maximum address. This is illegal."
  },
  {
   "id": "ASL_MSG_INVALID_MIN_MAX",
   "advice": "The minimum, maximum addresses and length must be a multiple of the alignment, which must be a power of 2."
  },
  {
   "id": "ASL_MSG_INVALID_PERFORMANCE",
   "advice": "Performance/Robustness value in StartDependentFn declaration was > 2. It must be one of: 0 = Good, 1 = Acceptable, 2 = Sub-optimal. See section 18.5.111 of version 4.0a of the ACPI specification for more information."
  },
  {
   "id": "ASL_MSG_INVALID_PRIORITY",
   "advice": "Priority in StartDependentFn declaration was > 2. It must be one of: 0 = Good, 1 = Acceptable, 2 = Sub-optimal. See section 18.5.111 of version 4.0a of the ACPI specification for more information."
  },
  {
   "id": "ASL_MSG_INVALID_TIME",
   "advice": "Illegal stall time (>255). Generally, stall times > 100 microseconds must use sleep() instead. See section 18.5.110 Stall (Stall for a Short Time)
 of version 4.0a of the ACPI speciciation."
  },
  {
   "id": "ASL_MSG_NAMED_OBJECT_IN_WHILE",
   "advice": "A named object cannot be created inside a while loop. This needs to be fixed."
  },
  {
   "id": "ASL_MSG_NO_RETVAL",
   "advice": "The called method did not return a value, which was unexpected. This is a bug and will lead to undefined behaviour during execution."
  },
  {
   "id": "ASL_MSG_NULL_DESCRIPTOR",
   "advice": "A 'null descriptor' (where most fields are set to zero) has been found. Usually, these are updated or completed at run time using BufferFields, but to do so one requires a resource tag and this descriptor does not have one, hence it cannot be referenced to allow it to be updated.  This is most probably a bug and needs to be fixed."
  },
  {
   "id": "ASL_MSG_REGION_BUFFER_ACCESS",
   "advice": "SMBUS and IPMI regions require BufferAcc access. This error occurs when the incorrect access type is used on a region."
  },
  {
   "id": "ASL_MSG_REGION_BYTE_ACCESS",
   "advice": "Embedded Controller (EC) and CMOS regions can only be accessed using ByteAcc access."
  },
  {
   "id": "ASL_MSG_RESERVED_ARG_COUNT_HI",
   "advice": "Reserved method is called with too many arguments. This is a bug and can lead to unexpected and undefined behaviour."
  },
  {
   "id": "ASL_MSG_RESERVED_ARG_COUNT_LO",
   "advice": "Method is called with too few arguments. This is a bug and can lead to unexpected and undefined behaviour."
  },
  {
   "id": "ASL_MSG_RESULT_NOT_USED",
   "advice": "The result from an operation is not used. This is probably not intended and could be a bug and should be checked."
  },
  {
   "id": "ASL_MSG_SERIALIZED",
   "advice": "A method needs to be marked Serialized because of the wat Switch() has been implemented (multiple threads cannot execute the method concurrently since local temporary names need to be created which could lead to race condtions).  This should be explicity specified in the original code to avoid potential run time race conditions."
  },
  {
   "id": "ASL_MSG_SOME_NO_RETVAL",
   "advice": "Method sometimes return a value, sometimes it does not. This is inconsistent behaviour and a bug in the AML. This needs to be fixed to avoid incorrect behaviour at run time."
  },
  {
   "id": "ASL_MSG_SYNC_LEVEL",
   "advice": "Data mutex synchronization level is too large, should be 0..15.  See section 18.5.79 Mutex (Declare Synchronization/Mutex Object) of version 4.0a of the ACPI specification for more details."
  },
  {
   "id": "ASL_MSG_SYNTAX",
   "advice": "The disassembled code cannot be reassembled using the strict IASL compiler as it contains syntax errors."
  },
  {
   "id": "ASL_MSG_TABLE_SIGNATURE",
   "advice": "Table signature must be 4 characters long and must contain alphanumeric characters."
  },
  {
   "id": "ASL_MSG_TIMEOUT",
   "advice": "The operation can possibly timeout, and hence the return value indicates an timeout error. However, because the return value is not checked this very probably indicates that the code is buggy.  A possible scenario is that a mutex times out and the code attempts to access data in a critical region when it should not.  This will lead to undefined behaviour.  This should be fixed."
  },
  {
   "id": "ASL_MSG_UPPER_CASE",
   "advice": "Characters in literal string that are not hexadecimal letters must be upper case."
  }
 ]
}
