{
 "firmware_error_warning_patterns":
 [
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "MRC:.*(invalid|failed to|Could not|failure).*",
    "advice": "Debug MRC cache code and check flash write protection.",
    "label": "MRC"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "GMA:.*(Error|Broken|couldn't).*",
    "advice": "Debug Intel GMA driver code and check VGA Option ROM and VBT included into CBFS.",
    "label": "GMA"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_CRITICAL",
    "pattern": "ERROR: Not enough MTRRs available!.*",
    "advice": "Increase memory alignment to reduce MTRR usage.",
    "label": "MTRR"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": ".*: Missing ACPI scope",
    "advice": "Add an ACPI name for coreboot's SSDT generator.",
    "label": "SSDT"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_MEDIUM",
    "pattern": "ERROR: No timestamp.*",
    "advice": "Debug the timestamp code.",
    "label": "TIMESTAMP"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "Error:.*cbmem",
    "advice": "Debug the CBMEM code.",
    "label": "CBMEM"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "(No|Invalid) DSDT.*",
    "advice": "Provide or fix the DSDT file.",
    "label": "DSDT"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "ACPI: Error: Could not add ACPI table.*",
    "advice": "Increase MAX_ACPI_TABLES.",
    "label": "RSDP"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_MEDIUM",
    "pattern": "PCI: Check your devicetree.cb.",
    "advice": "Check the mainboard's devicetree.cb for PCI related errors.",
    "label": "STATIC_PCI"
  },
  {
    "compare_mode": "regex",
    "log_level": "LOG_LEVEL_HIGH",
    "pattern": "PCI: Check your devicetree.cb.",
    "advice": "Check the mainboard's devicetree.cb for PCI related errors.",
    "label": "STATIC_PCI"
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "ERROR: Unsupported compression algorithm",
   "advice": "Use a supported compression algorithm.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "ERROR: Partial decompression ran over scratchbuf!",
   "advice": "Provide a valid compressed payload.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "ERROR: Invalid kernel magic:",
   "advice": "Provide a valid kernel Image (uncompressed, not ELF).",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_LOW",
   "pattern": "FIT: image_size not set in kernel header.",
   "advice": "Update your kernel to a recent version.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "CRIT: Providing a valid FDT is mandatory to boot an ARM64 kernel!",
   "advice": "Add a devicetree or provide a valid one.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "FIT: No compatible or default configs.",
   "advice": "Check the compat string in provided uImage or add a compatible config.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Unsupported payload type.",
   "advice": "Use a different payload type or enable support for it in Kconfig.",
   "label": "FIT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Payload not loaded.",
   "advice": "A fatal error occured while trying to load the payload. Check your payload.",
   "label": "PROG_LOADERS",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Ramstage was not loaded!",
   "advice": "A fatal error occured while trying to load the ramstage section from boot-media.",
   "label": "PROG_LOADERS",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Couldn't load romstage.",
   "advice": "A fatal error occured while trying to load the romstage section from boot-media.",
   "label": "PROG_LOADERS",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "DRAM INIT FAILED !",
   "advice": "The DRAM init wasn't successful. Check the TWSI, check if the DIMMs are placed well. Check that the DIMMs are supported.",
   "label": "CN81XX",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Failed DRAM test.",
   "advice": "The DRAM init was successful, but the DRAM works faulty. Check if the DIMMs are placed well or try to lower the DRAM frequency.",
   "label": "CN81XX",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "TTB memory type must match TCR (normal, cacheable)!",
   "advice": "Set the TTB memory region to 'normal, cacheable' before enabling the MMU.",
   "label": "MMU",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "ASSERTION ERROR:.*",
   "advice": "Fix the assertion in the reported file at given line.",
   "label": "ASSERT",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "ERROR: BUG ENCOUNTERED.*",
   "advice": "Fix the assertion in the reported file at given line.",
   "label": "ASSERT",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "platform_i2c_transfer: error transmitting data",
   "advice": "The I2C transfer aborted due to errors. Check your transmission protocol.",
   "label": "TWSI",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_MEDIUM",
   "pattern": "ERROR: Core .* failed to start.",
   "advice": "The core didn't come out of reset. Check the secondary stack configuration.",
   "label": "CPU",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "MP initialization failure.",
   "advice": "The core didn't come out of reset or SMM initialization failed.",
   "label": "CPU",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "Unable to install SMM relocation handler.",
   "advice": "SMM has been disabled.",
   "label": "CPU",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "Unable to install SMM permanent handler.",
   "advice": "SMM has been disabled.",
   "label": "CPU",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "AP call expired.",
   "advice": "One or more cores didn't come out of reset.",
   "label": "CPU",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "SMBUS transaction (timeout|error)",
   "advice": "Failed to communicate with periphial.",
   "label": "SMBUS",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "Warning: Can't write PCI IRQ assignments.*",
   "advice": "Check IRQ routing tables.",
   "label": "IRQ",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "ICH SPI: SCIP timeout.*",
   "advice": "SPI transaction timeout out.",
   "label": "SPI",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "ICH SPI: Read but no target buffer",
   "advice": "No buffer specified where to place received data.",
   "label": "SPI",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "ICH SPI: No opcode for transfer",
   "advice": "No buffer specified where to read transmition data from.",
   "label": "SPI",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "ICH SPI:.*transaction error",
   "advice": "Failed to transceive data.",
   "label": "SPI",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "Invalid SCI route! Defaulting to IRQ9.",
   "advice": "An invalid SCI route has been specified.",
   "label": "IRQ",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "Unable to locate Global NVS",
   "advice": "NVS buffer could not be found. SMM/ACPI communication will be broken. ACPI variables might be wrong.",
   "label": "ACPI",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "SBI Failure:.*",
   "advice": "Failed to configure Sideband Interface",
   "label": "SBI",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "HECI:.*(timeout|timed out|not ready|Failed to|response is too big).*",
   "advice": "Failed to configure Managment Engine.",
   "label": "HECI",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_HIGH",
   "pattern": "VMX : Failed to get soc vmx param",
   "advice": "Could not find VMX entry in SoC config.",
   "label": "VMX",
  },
  {
   "compare_mode": "string",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Invalid GPIO pad number",
   "advice": "The PAD is not part of any gpio community.",
   "label": "GPIO",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "(GMADR|GTTMMADR) is not programmed!",
   "advice": "The graphics stolen memory size and BAR location hasn't been programmed.",
   "label": "IGD",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "lzma: Decoding error.*",
   "advice": "Unsupported compression arguments used, corrupted file or destination isn't usable RAM.",
   "label": "LZMA",
  },
  {
   "compare_mode": "regex",
   "log_level": "LOG_LEVEL_CRITICAL",
   "pattern": "Error:.*Out of memory.*",
   "advice": "Reduce heap usage or increase heap in ramstage.",
   "label": "MALLOC",
  },
 ]
}
